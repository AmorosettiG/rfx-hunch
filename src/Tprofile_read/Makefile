# Makefile.in generated by automake 1.13.4 from Makefile.am.
# src/Tprofile_read/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/rfx-hunch
pkgincludedir = $(includedir)/rfx-hunch
pkglibdir = $(libdir)/rfx-hunch
pkglibexecdir = $(libexecdir)/rfx-hunch
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
DIST_COMMON = $(top_srcdir)/Common.mk \
	$(top_srcdir)/conf/kscripts/build_common.mk \
	$(top_srcdir)/conf/kscripts/docker.mk $(srcdir)/Makefile.in \
	$(srcdir)/Makefile.am
#am__append_1 = gnu-make
subdir = src/Tprofile_read
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/conf/m4/ax_defun_local.m4 \
	$(top_srcdir)/conf/m4/ax_docker_build.m4 \
	$(top_srcdir)/conf/m4/ax_enable_kconfig.m4 \
	$(top_srcdir)/conf/m4/ax_gitignore_list.m4 \
	$(top_srcdir)/conf/m4/ax_prog_doxygen.m4 \
	$(top_srcdir)/conf/m4/ax_rpm_init.m4 \
	$(top_srcdir)/conf/m4/ax_target_selfhelp.m4 \
	$(top_srcdir)/conf/m4/m4_ax_check_enable_debug.m4 \
	$(top_srcdir)/conf/m4/m4_ax_configure_args.m4 \
	$(top_srcdir)/conf/m4/m4_ax_is_release.m4 \
	$(top_srcdir)/conf/m4/m4_ax_valgrind_check.m4 \
	$(top_srcdir)/conf/kscripts/docker.ac \
	$(top_srcdir)/conf/kscripts/build_common.ac \
	$(top_srcdir)/conf/autoconf-doxygen/doxygen.ac \
	$(top_srcdir)/conf/kscripts/ext_mdsplus.ac \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
ACLOCAL = ${SHELL} /home/amorosetti/devel/rfx-hunch/conf/missing aclocal-1.13
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AUTOCONF = ${SHELL} /home/amorosetti/devel/rfx-hunch/conf/missing autoconf
AUTOHEADER = ${SHELL} /home/amorosetti/devel/rfx-hunch/conf/missing autoheader
AUTOMAKE = ${SHELL} /home/amorosetti/devel/rfx-hunch/conf/missing automake-1.13
AWK = gawk
BUILD_CUSTOM_GNUMAKE_DIR = 
BUILD_CUSTOM_GNUMAKE_URL = 
CC = icc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CODE_SERVER_AUTH = 
CODE_SERVER_HOST = 
CODE_SERVER_PORT = 
CODE_SERVER_URL = 
CONFIG_STATUS_DEPENDENCIES = $(top_builddir)/.config
CPPFLAGS = 
CURL = curl
CXX = icpc
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOCKER_ENTRYPOINT = /bin/sh
DOCKER_NETWORKS = 
DOCKER_PROFILE = 
DOCKER_PROFILE_debug = 
DOCKER_PS1 = 
DOCKER_RUNARGS = 
DOCKER_SHARES = 
DOT_PATH = 
DOWNLOADS = tensorflow_src rdipietro
DOWNLOAD_DIR = 
DOXYGEN_BINARY = 
DOXYGEN_CHI = 
DOXYGEN_CHM = 
DOXYGEN_DOT = 
DOXYGEN_HTML = 
DOXYGEN_MAN = 
DOXYGEN_MODULES = 
DOXYGEN_MODULES_AVAILABLE = 
DOXYGEN_MODULES_DISABLED = 
DOXYGEN_MODULES_ENABLED = 
DOXYGEN_PAPER_SIZE = 
DOXYGEN_PDF = 
DOXYGEN_PS = 
DOXYGEN_RTF = 
DOXYGEN_XML = 
DX_CONFIG = 
DX_DOCDIR = 
DX_DOT = 
DX_DVIPS = 
DX_EGREP = 
DX_HHC = 
DX_LATEX = 
DX_MAKEINDEX = 
DX_PDFLATEX = 
DX_PERL = 
DX_PROJECT = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
ENABLE_DOCKER_TARGETS = yes
EXEEXT = 
EXT_MDSPLUS_BRANCH = 
EXT_MDSPLUS_CONFIGURE_ARGS = 
EXT_MDSPLUS_URL = 
EXT_MODULES = 
GENERATE_CHI = 
GENERATE_HTML = 
GENERATE_HTMLHELP = 
GENERATE_LATEX = 
GENERATE_MAN = 
GENERATE_RTF = 
GENERATE_XML = 
HAVE_DOCKER = no
HAVE_DOT = 
HHC_PATH = 
IDE = 
IDE_BIN = 
IDE_WSDIR = 
INSTALL = /bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LEX = flex
LEXLIB = 
LEX_OUTPUT_ROOT = lex.yy
LIBOBJS = 
LIBS = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/amorosetti/devel/rfx-hunch/conf/missing makeinfo
MAKE_PROCESS = 72
MDS_LIBSUFFIX = 
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = rfx-hunch
PACKAGE_BUGREPORT = andrea.rgn@gmail.com
PACKAGE_NAME = rfx-hunch
PACKAGE_STRING = rfx-hunch 0.1
PACKAGE_TARNAME = rfx-hunch
PACKAGE_URL = 
PACKAGE_VERSION = 0.1
PAPER_SIZE = 
PATH_SEPARATOR = :
PERL = perl
PERL_PATH = 
RPM_ARGS = 
RPM_CONFIGURE_ARGS =  '--enable-kconfig' 'CC=icc' 'CXX=icpc'
RPM_DIR = 
RPM_PROG = 
RPM_RELEASE = 1
RPM_TARBALL = 
RPM_TARGET = 
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
SRCDIR_BUILD = 
STRIP = 
TAR = gtar
UNIQ = uniq
VERSION = 0.1
WC = wc
YACC = bison -y
YFLAGS = 
abs_builddir = /home/amorosetti/devel/rfx-hunch/src/Tprofile_read
abs_srcdir = /home/amorosetti/devel/rfx-hunch/src/Tprofile_read
abs_top_builddir = /home/amorosetti/devel/rfx-hunch
abs_top_srcdir = /home/amorosetti/devel/rfx-hunch
ac_ct_CC = icc
ac_ct_CXX = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/amorosetti/devel/rfx-hunch/conf/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
ak__DOWNLOADS = $(DOWNLOADS) $(am__append_1) ak__cdr-code-server
dl__tar_ext = %.tar %.tar.gz %.tar.xz %.tar.bz %.tar.bz2
dl__git_ext = git://% %.git
_fname = $(subst -,_,$(subst ' ',_,$(subst .,_,$1)))
ak__DIRECTORIES = $(DIRECTORIES) $(PYTHON_USERBASE) $(ATOM_HOME) \
	$(ak__QTCREATOR_SETTINGS_PATH) $(ak__VS_CODE_PATH)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(ak__DIST_COMMON)
ak__DIST_COMMON = \
                  $(top_srcdir)/bootstrap \
				  $(top_srcdir)/conf/update_submodules.sh \
				  $(top_srcdir)/Kconfig \
				  $(wildcard $(patsubst %.ac,%.kconfig,$(filter %.ac,$(am__aclocal_m4_deps))))

#gnu_make_URL = http://ftp.gnu.org/gnu/make/make-4.1.tar.gz
#gnu_make_DIR = $(BUILD_CUSTOM_GNUMAKE_DIR)
#_ = $(BUILD_CUSTOM_GNUMAKE_DIR)/make
#MAKE = $(BUILD_CUSTOM_GNUMAKE_DIR)/make
edit_DEPS = qws
PYTHON_USERBASE = $(abs_top_builddir)/conf/python/site-packages
ac__PYTHON_PACKAGES = $(PYTHON_PACKAGES) setuptools \
	python-language-server[all]

# using python call fixes pip: https://github.com/pypa/pip/issues/7205
PIP = python -m pip
ac__ATOM_PACKAGES = $(ATOM_PACKAGES) project-manager atom-ide-ui \
	ide-python teletype refactor autocomplete-clang goto build \
	build-make
ATOM_PACKAGES_PATH = $(addprefix $(ATOM_HOME)/packages/,$(ac__ATOM_PACKAGES))
ak__QTCREATOR_SETTINGS_PATH = $(or $(QTCREATOR_SETTINGS_PATH),$(abs_top_builddir)/conf/ide)
ak__VS_CODE_PATH = $(or $(VS_CODE_PATH),$(abs_top_builddir)/conf/ide/vs_code)
ak__VS_CODE_PROJECT_PATH = $(or $(VS_CODE_PROJECT_PATH),$(top_srcdir))
ak__CODE_SERVER_HOST = $(or $(CODE_SERVER_HOST),0.0.0.0)
ak__CODE_SERVER_PORT = $(or $(CODE_SERVER_PORT),8080)
ak__CODE_SERVER_AUTH = $(or $(CODE_SEVER_AUTH),none)
ak__CODE_SERVER_URL = $(or $(CODE_SERVER_URL),https://github.com/cdr/code-server/releases/download/2.1692-vsc1.39.2/code-server2.1692-vsc1.39.2-linux-x86_64.tar.gz)
ak__cdr_code_server_URL = $(ak__CODE_SERVER_URL)
ak__cdr_code_server_DIR = $(top_builddir)/conf/ide/code-server

# NODOCKERBUILD += Makefile $(srcdir)/Makefile.in $(srcdir)/Makefile.am $(top_srcdir)/configure.ac $(ACLOCAL_M4) $(top_srcdir)/configure am--refresh \
#                    $(am__aclocal_m4_deps) $(am__configure_deps) $(top_srcdir)/%.mk \
#					docker-%
NODOCKERBUILD = help reconfigure ${ak__DOCKER_TARGETS} \
	${DOCKER_MACHINES} am__configure_deps
ak__DOCKER_TARGETS = $(DOCKER_TARGETS)
DSHELL = $(top_srcdir)/conf/dk.sh ${DSHELL_ARGS}
NO_DOCKER_TARGETS = Makefile $(srcdir)/Makefile.in $(srcdir)/Makefile.am $(top_srcdir)/configure.ac $(ACLOCAL_M4) $(top_srcdir)/configure am--refresh \
                    $(am__aclocal_m4_deps) $(am__configure_deps) $(top_srcdir)/%.mk \
					docker-%


# MDSplus setup to access Analisys variables (offline)
# RUN_PREQUEL = treeSetSource A inProgress;
PYTHON_PACKAGES = six numpy wheel mock bokeh bokeh-metaplot sklearn
# tensorflow-model-optimization
PYTHONPATH = $(abs_top_builddir)/conf/python/site-packages/lib/python3.6/site-packages/:/usr/local/lib/python3.6/dist-packages:/usr/lib/python3.6/site-packages/:$(abs_srcdir)
tensorflow_src_URL = https://github.com/tensorflow/tensorflow.git
tensorflow_src_BRANCH = master

# SPARSIFIER
# tensorflow-model-optimization

# BREVITAS
# click  onnx  

# TORCH_LIB_PATH = 	$(abs_top_builddir)/ext/pytorch/build/lib \
# 					$(abs_top_builddir)/ext/pytorch/build/lib.linux-x86_64-3.7

# TORCH_PY_PATH = $(abs_top_builddir)/ext/pytorch/build/lib.linux-x86_64-3.7 \
# 				$(abs_top_builddir)/ext/pytorch

# ONNX_LIB_PATH = $(TORCH_LIB_PATH)
# ONNX_PY_PATH = 	$(abs_top_builddir)/ext/onnx/build/lib.linux-x86_64-3.7 \
# 				$(abs_top_builddir)/ext/onnx \
# 				$(TORCH_PY_PATH)

# FINN_WS = $(abs_top_builddir)/ext/FINN
# FINN_LIB_PATH =  $(ONNX_LIB_PATH)
# FINN_PY_PATH = 	\
# 					$(FINN_WS)/src \
# 					$(FINN_WS)/brevitas_cnv_lfc/training_scripts \
# 					$(FINN_WS)/brevitas \
# 					$(FINN_WS)/pyverilator \
# 					$(FINN_WS)/notebooks \
# 					$(ONNX_PY_PATH)

# FINN_INST_NAME = finn_test
# DIRECTORIES = /tmp/$(FINN_INST_NAME)

# export PYTHONDONTWRITEBYTECODE = 1
# export FINN_INST_NAME := $(FINN_INST_NAME)
# export FINN_WS := $(FINN_WS)
# export VIVADO_PATH := $(or $(VIVADO_PATH),/mnt/data0/Xilinx/Vivado/2019.1/)
# export PYNQSHELL_PATH := $(FINN_WS)/PYNQ-HelloWorld/boards
# export FINN_ROOT := $(FINN_WS)
# export LD_LIBRARY_PATH := $(call ak__join_with,:,$(FINN_LIB_PATH))$(if ${LD_LIBRARY_PATH},:${LD_LIBRARY_PATH})
# export PYTHONPATH := $(call ak__join_with,:,$(FINN_PY_PATH))$(if ${PYTHONPATH},:${PYTHONPATH})

# .########.########....##..
# ....##....##........####..
# ....##....##..........##..
# ....##....######......##..
# ....##....##..........##..
# ....##....##..........##..
# ....##....##........######
DOCKER_TARGETS = tf-% pip-install te_db_1.npy runpy jupyter \
	jupyter-lab tf1-% runpy_v1
PYSCRIPTS = examples/AEFIT_qsh.py
rdipietro_URL = https://github.com/rdipietro/jupyter-notebooks.git
rdipietro_BRANCH = master
rdipietro_DIR = $(srcdir)/jpnb/rdipietro
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Common.mk $(top_srcdir)/conf/kscripts/build_common.mk $(top_srcdir)/conf/kscripts/docker.mk $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Tprofile_read/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Tprofile_read/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/Common.mk $(top_srcdir)/conf/kscripts/build_common.mk $(top_srcdir)/conf/kscripts/docker.mk:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
tags TAGS:

ctags CTAGS:

cscope cscopelist:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic cscopelist-am \
	ctags-am distclean distclean-generic distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic pdf \
	pdf-am ps ps-am tags-am uninstall uninstall-am


MAKE_PROCESS  ?= $(shell grep -c ^processor /proc/cpuinfo)
DOWNLOAD_DIR  ?= $(top_builddir)/downloads
DOWNLOADS     ?= $(ak__DOWNLOADS)

# PERL ENV SUBST
# --------------
# This can be used to make a sh substitution template by calling $(call __ax_pl_envsubst, template, target)
#
# __ax_pl_envsubst ?= $(PERL) -pe 's/([^\\]|^)\$$\{([a-zA-Z_][a-zA-Z_0-9]*)\}/$$1.$$ENV{$$2}/eg' < $1 > $2
__ax_pl_envsubst  ?= $(PERL) -pe 's/([^\\]|^)\$$\{([a-zA-Z_][a-zA-Z_0-9]*)\}/$$1.$$ENV{$$2}/eg;s/\\\$$/\$$/g;' < $1 > $2
__ax_pl_envsubst2 ?= $(PERL) -pe 's/([^\\]|^)\$$\(([a-zA-Z_][a-zA-Z_0-9]*)\)/$$1.$$ENV{$$2}/eg;s/\\\$$/\$$/g;' < $1 > $2

# $(ak__ENVPARSEFILES):
# 	@ $(call __ax_pl_envsubst2,$<,$@);

# FILTER ALL REPETITIONS IN A LIST
# --------------------------------
ak__uniq ?= $(if $1,$(firstword $1) $(call ak__uniq,$(filter-out $(firstword $1),$1)))

# FLAT NAME SUBST
# ---------------
ak__flt ?= $(subst -,_,$(subst ' ',_,$(subst .,_,$1)))

define dl__download_tar
 $(info "Downloading tar file: $1") \
 $(MKDIR_P) ${DOWNLOAD_DIR} $2; \
 _tar=${DOWNLOAD_DIR}/$$(echo $1 | sed -e 's|.*/||'); \
 test -f $$_tar || curl -SL $1 > $$_tar; \
 _wcl=$$(tar -tf $$_tar | sed -e 's|/.*||' | uniq | wc -l); \
 if test $$_wcl = 1; then \
  tar -xf $$_tar -C $2 --strip 1; \
 else \
  tar -xf $$_tar -C $2; \
 fi
endef

define dl__download_git
 $(info "Downloading git repo: $1") \
 git clone $1 $2 $(if $3,-b $3)
endef

define dl__download_generic
 $(info "Downloading file: $1") \
 $(MKDIR_P) ${DOWNLOAD_DIR}; \
 _f=${DOWNLOAD_DIR}/$$(echo $1 | sed -e 's|.*/||'); \
 test -f $$_f || curl -SL $1 > $$_f; \
 $(LN_S) $$_f $2;
endef

define dl__dir =
$(if $(${_fname}_DIR),
$(${_fname}_DIR): $$(${_fname}_DEPS)
	@ $(MAKE) $(AM_MAKEFLAGS) download NAME=$1
)
endef
$(foreach x,$(ak__DOWNLOADS),$(eval $(call dl__dir,$x)))

# $(ak__DOWNLOADS): _flt = $(subst -,_,$(subst ' ',_,$(subst .,_,$1)))
$(ak__DOWNLOADS):
	@ $(MAKE) $(AM_MAKEFLAGS) download NAME=$@

.PHONY: download
download: ##@@miscellaneous download target in $NAME and $DOWNLOAD_URL
download: FNAME   = $(subst -,_,$(subst ' ',_,$(subst .,_,$(NAME))))
download: URL     = $(or $($(FNAME)_URL),$(DOWNLOAD_URL))
download: DIR     = $(or $($(FNAME)_DIR),$(NAME))
download: BRANCH  = $(or $($(FNAME)_BRANCH),$(BRANCH))
download: $(or $($(FNAME)_DEPS), $(DOWNLOAD_DEPS))
	@ $(foreach x,$(URL),\
		$(info Download: $x to $(DIR)) \
		$(if $(filter $(dl__tar_ext),$x),$(call dl__download_tar,$x,$(DIR)), \
		$(if $(filter $(dl__git_ext),$x),$(call dl__download_git,$x,$(DIR),$(BRANCH)), \
		$(call dl__download_generic,$x,$(DIR)) ) ) \
	   )
$(ak__DIRECTORIES):
	@ $(info buildinf dir for: $@) $(MKDIR_P) $@

#  USAGE: to install name as a whole directory add the following target:
#
#  install-<name>DATA:
# 	 @ $(MAKE) ak__$@
#
ak__install-%DATA:
	@$(NORMAL_INSTALL)
	@list='$($*_DATA)'; test -n "$($*dir)" || list=; \
	 if test -n "$$list"; then \
	   echo " $(MKDIR_P) '$(DESTDIR)$($*dir)'"; \
	   $(MKDIR_P) "$(DESTDIR)$($*dir)" || exit 1; \
	 fi; \
	 for p in $$list; do \
	   if test -f "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -f "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read files; do \
	   echo " $(INSTALL_DATA) $$files '$(DESTDIR)$($*dir)'"; \
	   $(INSTALL_DATA) $$files "$(DESTDIR)$($*dir)" || exit $$?; \
	 done; \
	 for p in $$list; do \
	   if test -d "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -d "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read drs; do \
	 	echo "copy directory: $$drs to $(DESTDIR)$($*dir)"; \
	 	cp -au $$drs "$(DESTDIR)$($*dir)"; \
	 done

#$(BUILD_CUSTOM_GNUMAKE_DIR)/Makefile: | gnu-make
#	@ cd $(dir $@) && ./configure

#$(BUILD_CUSTOM_GNUMAKE_DIR)/make: MAKE = make
#$(BUILD_CUSTOM_GNUMAKE_DIR)/make: $(BUILD_CUSTOM_GNUMAKE_DIR)/Makefile
#	@ make -C $(dir $@) all

#IDE ?= qtcreator
#edit: ##@miscellaneous start editor define in $IDE
#edit: $(edit_DEPS) edit-$(IDE)

export PYTHONUSERBASE = $(PYTHON_USERBASE)
export PATH := $(PYTHON_USERBASE):$(PYTHON_USERBASE)/bin:$(PATH)

pip-install: ##@@python install prequired packages in $PYTHON_PACKAGES
pip-install: Q=-q
pip-list: ##@@python install prequired packages in $PYTHON_PACKAGES
pip-%: | $(PYTHON_USERBASE)
	@ $(PIP) $* $(Q) --upgrade --user $(ac__PYTHON_PACKAGES)

ATOM_HOME         ?= $(abs_top_builddir)/conf/ide/atom
ATOM_PROJECT_PATH ?= $(top_srcdir) $(builddir)

export ATOM_HOME
$(ATOM_PACKAGES_PATH):
	@ apm install $(notdir $@)

apm-list: ##@@atom apm list packages in $ATOM_HOME
apm-%: | $(ATOM_HOME)
	@ apm $*

apm-install: ##@@atom apm install packages in $ATOM_HOME
apm-install: $(ATOM_PACKAGES_PATH)
edit-atom: ##@@ide start atom
edit-atom: | apm-install pip-install
	@ atom $(foreach d,$(ATOM_PROJECT_PATH),-a $d )

edit-emacs: ##@@ide start emacs
edit-emacs:
	@ emacs $(srcdir)
QTCREATOR_THEME ?= dark
QTCREATOR_COLOR ?= Inkpot
edit-qtcreator: ##@@ide start qtcreator
edit-qtcreator: | $(ak__QTCREATOR_SETTINGS_PATH)
	@ qtcreator -settingspath $(ak__QTCREATOR_SETTINGS_PATH) \
					-theme $(QTCREATOR_THEME) -color $(QTCREATOR_COLOR)

#
%.qws: %.template.qws
	 @ $(call __ax_pl_envsubst,$<,$@);

qws: QWS_FILES_TEMPLATES = $(shell find $(top_srcdir)/conf/ide/QtProject/qtcreator/ -name '*.qws.template' 3>/dev/null)
qws: QWS_FILES = $(QWS_FILES_TEMPLATES:.qws.template=.qws)
qws: abs_top_srcdir := $(abs_top_srcdir)
qws: $(QWS_FILES)
edit-code: ##@@ide start visual studio code editor
edit-code: | $(ak__VS_CODE_PATH)
	@ code -n $(ak__VS_CODE_PROJECT_PATH)  --user-data-dir $(ak__VS_CODE_PATH)
ak__cdr-code-server: 

edit-code-server: ##@@ide start cdr vs code server installed in conf/code-server
edit-code-server: ak__cdr-code-server
	$(ak__cdr_code_server_DIR)/code-server --host $(ak__CODE_SERVER_HOST) --port $(ak__CODE_SERVER_PORT) --auth $(ak__CODE_SERVER_AUTH) \
	--user-data-dir $(ak__VS_CODE_PATH) $(top_srcdir)

print-env-: ##@@miscellaneous print env variable
print-env-%:
	@ $(if $($*),$(info $*="$($*)"),$(info $* not set)):;

# docker build targets

export DOCKER_NETWORKS   ?= bridge
export DOCKER_PS1

# Disable shared memory for QT exported display
export QT_X11_NO_MITSHM = 1

export srcdir
export builddir
export top_srcdir
export top_builddir
export abs_top_srcdir
export abs_top_builddir

export DOCKER_CONTAINER
export DOCKER_IMAGE
export DOCKER_URL
export DOCKER_DOCKERFILE
export DOCKER_SHARES
export DOCKER_MOUNTS
export DOCKER_PORTS
export DOCKER_NETWORKS
export DOCKER_SHELL = /bin/sh
export DOCKER_REGISTRY
export DOCKER_ENTRYPOINT
# DSHELL_ARGS = -v

#$(ak__DOCKER_TARGETS): override SHELL = $(DSHELL)
#$(NO_DOCKER_TARGETS): override SHELL = /bin/sh
#$(NO_DOCKER_TARGETS): override HAVE_DOCKER = no

docker-clean: ##@@docker_target clean docker container conf in .docker directory
docker-start: ##@@docker_target start advanced per target docker container
docker-stop:  ##@@docker_target stop advanced per target docker container
docker-:      ##@@docker_target advanced per target docker (any command passed to conf/dk.sh)
docker-%:
	@ $(info [docker] $*)
	@ . $(DSHELL) $*

export DOCKER_MACHINE
export DOCKER_MACHINE_ISO
export DOCKER_MACHINE_ARGS
export DOCKER_MACHINE_SORAGE_PATH ?= $(abs_top_builddir)/conf/.docker

$(DOCKER_MACHINES):
	@ $(MAKE) machine-create DOCKER_MACHINE=$@

docker-machine-%: DOCKER_CONTAINER = none
docker-machine-%: DOCKER_MACHINE_ARGS := $(or $($(DOCKER_MACHINE)_ARGS),$(DOCKER_MACHINE_ARGS))
docker-machine-%: DOCKER_MACHINE_ISO  := $(or $($(DOCKER_MACHINE)_ISO),$(DOCKER_MACHINE_ISO))
docker-machine-%: 
	$(DSHELL) machine_$*

# include $(top_srcdir)/conf/kscripts/toolchain.mk

SH_GREEN  ?= $(shell tput -Txterm setaf 2)
SH_WHITE  ?= $(shell tput -Txterm setaf 7)
SH_YELLOW ?= $(shell tput -Txterm setaf 3)
SH_RESET  ?= $(shell tput -Txterm sgr0)

HELP_DESCRIPTION ?= Documented targets follow

ifndef SELFHELP_FUNC
SELFHELP_FUNC = \
    %help; \
    while(<>) { \
	if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@(\w+))?\s(.*)$$/) { \
	    push(@{$$help{$$2}}, [$$1, $$3]); \
	} \
    }; \
    print "\n"; \
    print "| ${HELP_DESCRIPTION}\n"; \
    print "| \n"; \
    print "| ${SH_GREEN}usage: make target${SH_RESET}\n"; \
    print "| \n"; \
    for ( sort keys %help ) { \
	print "| ${SH_YELLOW}$$_${SH_RESET}:\n"; \
	printf("|   %-20s %-60s\n", $$_->[0], $$_->[1]) for @{$$help{$$_}}; \
	print "| \n"; \
    } \
    print "\n";

SELFHELP_ADVANCED_FUNC = \
    %help; \
    while(<>) { \
	if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@(\w+))?\s(.*)$$/) { \
	    push(@{$$help{$$2}}, [$$1, $$3]); \
	} \
	if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@@(\w+))?\s(.*)$$/) { \
	    push(@{$$help{$$2}}, [$$1, $$3]); \
	} \
    }; \
    print "\n"; \
	print ", ${SH_GREEN}ADVANCED TARGETS ${SH_RESET}\n"; \
	print "| \n"; \
	for ( sort keys %help ) { \
	print "| ${SH_YELLOW}$$_${SH_RESET}:\n"; \
	printf("|   %-20s %-60s\n", $$_->[0], $$_->[1]) for @{$$help{$$_}}; \
	print "| \n"; \
	} \
    print "\n";

SELFHELP_PRINT_TARGET_LIST_FUNC = \
    %help; \
    while(<>) { \
    if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@(\w+))?\s(.*)$$/) { \
    	push(@{$$help{$$2}}, [$$1, $$3]); } \
    if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@@(\w+))?\s(.*)$$/) { \
    	push(@{$$help{$$2}}, [$$1, $$3]); } \
    }; \
    for ( sort keys %help ) { \
    printf("%s ", $$_->[0]) for @{$$help{$$_}}; \
    } \

SELFHELP_TARGETS = $(shell perl -e '$(SELFHELP_PRINT_TARGET_LIST_FUNC)' $(MAKEFILE_LIST))

help:         ##@miscellaneous Show this help.
help-more:    ##@miscellaneous get help on advanced targets.
help-targets: ##@@miscellaneous get list of target with help signature

help-targets:
	@ $(info $(SELFHELP_TARGETS)):;

help:
	@perl -e '$(SELFHELP_FUNC)' $(MAKEFILE_LIST)

help-more:
	@perl -e '$(SELFHELP_ADVANCED_FUNC)' $(MAKEFILE_LIST)

endif

DL   ?= $(DOWNLOAD_DIR)
TMP  ?= $(abs_top_builddir)

${DL} ${TMP}:
	@$(MKDIR_P) $@

.PHONY: reconfigure
reconfigure: ##@miscellaneous re-run configure with last passed arguments
	@ \
	echo " -- Reconfiguring build with following parameters: -----------"; \
	echo $(shell $(abs_top_builddir)/config.status --config);              \
	echo " -------------------------------------------------------------"; \
	echo ; \
	cd '$(abs_top_builddir)' && \
	$(abs_top_srcdir)/configure $(shell $(abs_top_builddir)/config.status --config);

shell:
	$(SHELL)

export PYTHON_PACKAGES
export PYTHONPATH
export PYTHONUSERBASE
tensorflow_src: ##@tf download git tensorflow code (master)
tf-%: DOCKER_CONTAINER = tf-build

#IMAGE: tensorflow/tensorflow:nightly-devel-py3
tf-init: ##@tf build process
tf-init: DOCKER_IMAGE = tf-devel-py3
tf-init: DOCKER_URL = $(srcdir)/docker
tf-init: DOCKER_MOUNTS = dist-packages:/usr/local/lib/python3.6/dist-packages /run/user:/run/user
tf-init: DOCKER_PORTS = 8888:8888 6006:6006 3000:3000
tf-init: pip-install | tensorflow_src
	@ :; 
pip-install: DOCKER_CONTAINER = tf-build

tensorflow_src/.tf_configure.bazelrc: | tf-init
	@ cd tensorflow_src; ./configure

tf-configure: ##@tf reconfigure src code project
tf-configure: tensorflow_src/.tf_configure.bazelrc

tf-build: ##@tf build tensorflow code (not needed)
tf-build: tf-configure | tf-init
	@ cd tensorflow_src; bazel build --config=opt //tensorflow_src/tools/pip_package:build_pip_package

tf-shell: ##@tf enter container with shell (bash)
tf-shell: tf-init
	@ $(RUN_PREQUEL) bash -l

export abs_srcdir
export abs_builddir
export rfx_ver = inProgress

# automatically reload the following files (this works only if 'ipysh' has been imported too)
export IPY_AIMPORT = Hunch_utils \
					 Dummy_g1data \
					 Hunch_lsplot \
					 Hunch_tSNEplot
te_db_1.npy: ##@data create npy database 
te_db_1.npy: DOCKER_CONTAINER = tf-build
te_db_1.npy: create_db_1.py | pip-install
	@ python $< $(ARGS)
runpy: ##@jp Run ipython console starting by script defined in $NAME or $PYSCRIPTS
runpy: DOCKER_CONTAINER = tf-build
runpy: $(NAME) $(PYSCRIPTS) te_db_1.npy | pip-install
	@ $(info RUNNING: $<)
	  $(RUN_PREQUEL) ipython -i $< $(ARGS)
jupyter: DOCKER_CONTAINER = tf-build
jupyter: ##@jp start jupyter server on jpnb $(srcdir) folder
	@ $(RUN_PREQUEL) jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --notebook-dir=$(abs_srcdir)/jpnb
jupyter-lab: DOCKER_CONTAINER = tf-build
jupyter-lab: ##@jp start jupyter server on jpnb $(srcdir) folder
	@ $(RUN_PREQUEL) jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --notebook-dir=$(abs_srcdir)/jpnb

jupyter-theme: ##@jp setup theme
	jt -t onedork -cellw 95\% -T
rdipietro: ##download rdpietro notebooks
tf1-%: DOCKER_CONTAINER = tf1-stable

#IMAGE: tensorflow/tensorflow:nightly-devel-py3
tf1-init: ##@tf build process
tf1-init: DOCKER_IMAGE = tf-stable-py3
tf1-init: DOCKER_URL = $(srcdir)/docker_v1
tf1-init: DOCKER_MOUNTS = dist-packages-v1:/usr/local/lib/python3.5/dist-packages
# tf1-init: DOCKER_PORTS = 8888
tf1-init: 
	@ :; 

tf1-shell: ##@tf enter container with shell (bash)
tf1-shell: tf1-init
	@ bash -l

runpy_v1 tf1-%: PYTHONPATH = $(abs_srcdir)
runpy_v1: ##@jp Run ipython console starting by script defined in $NAME or $PYSCRIPTS
runpy_v1: DOCKER_CONTAINER = tf1-stable
runpy_v1: $(NAME) examples/AEFIT_dummy_v1.py te_db_1.npy | pip-install
	@ ipython3 -i $< $(ARGS)

#
# IF pip does not work run:   python -m pip install --upgrade --force-reinstall pip
#

# tf-install-vscode: USER=root
# tf-install-vscode: ##@@tf install vscode inside docker container (not working in docker-targets)
# tf-install-vscode:
# 	@ \
# 	 apt-get update; \
# 	 apt install -y gpg-agent software-properties-common apt-transport-https git wget libasound2 pylint; \
# 	 apt install -y libasound2 git; \
# 	 apt install -y python3-tk pylint; \
# 	 wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | apt-key add -; \
# 	 add-apt-repository -ru "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"; \
# 	 add-apt-repository -u "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"; \
# 	 apt install -y code;

# tf-install-mdsplus: export PYTHONUSERBASE=/usr/local/lib/python3.6/dist-packages/
# tf-install-mdsplus: USER=root
# tf-install-mdsplus: ##@tf install mdsplus in container
# tf-install-mdsplus:
# 	@ \
# 	  apt install -y gpg-agent software-properties-common apt-transport-https git wget libasound2 pylint; \
# 	  wget http://www.mdsplus.org/dist/mdsplus.gpg.key; \
# 	  apt-key add mdsplus.gpg.key; \
# 	  add-apt-repository -ru "deb http://www.mdsplus.org/dist/Ubuntu16/repo MDSplus stable"; \
# 	  add-apt-repository -u "deb http://www.mdsplus.org/dist/Ubuntu16/repo MDSplus stable"; \
# 	  mkdir -p /usr/lib/python3.6/site-packages/; \
# 	  apt install -y mdsplus mdsplus-python;

# tf-install-mdsplus-alpha: USER=root
# tf-install-mdsplus-alpha: ##@tf install mdsplus-alpha in container
# tf-install-mdsplus-alpha:
# 	@ \
# 	  apt install -y gpg-agent software-properties-common apt-transport-https git wget libasound2 pylint; \
# 	  wget http://www.mdsplus.org/dist/mdsplus.gpg.key; \
# 	  apt-key add mdsplus.gpg.key; \
# 	  add-apt-repository -ru "deb http://www.mdsplus.org/dist/Ubuntu16/repo MDSplus alpha"; \
# 	  add-apt-repository -u "deb http://www.mdsplus.org/dist/Ubuntu16/repo MDSplus alpha"; \
# 	  mkdir -p /usr/lib/python3.6/site-packages/; \
# 	  apt install -y mdsplus-alpha mdsplus-alpha-python;

# DOCKER_TARGETS += code-server-%
# CODE_SERVER_PORT = 8080

# code-server-init: DOCKER_PORTS = $(CODE_SERVER_PORT):$(CODE_SERVER_PORT)
# code-server-init: DOCKER_IMAGE = codercom/code-server:latest
# code-server-init: DOCKER_CONTAINER = code-server
# code-server-init:
# 	:;

# code-server-start: ##@@ide start vs code server via docker container
# code-server-start: code-server-init
# code-server-start: DOCKER_CONTAINER = code-server
# code-server-start: 
# 	dumb-init -- code-server --host 0.0.0.0 --port $(CODE_SERVER_PORT) --auth none $(top_srcdir)

# code-server-stop: ##@@ide stop vs code server via docker container
# code-server-stop: DOCKER_CONTAINER = code-server
# code-server-stop: docker-clean

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
